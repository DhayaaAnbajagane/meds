#!/usr/bin/env python
"""
Coadd the observations in the given MEDS file. Also coadd
the PSFs
"""
from __future__ import print_function
import os
import yaml
import meds

from argparse import ArgumentParser
parser=ArgumentParser()

parser.add_argument('config_file',help='configuration file')
parser.add_argument('meds_file',help='MEDS file for coadding')
parser.add_argument('psfmap_file',help='psf map file for given MEDS file')
parser.add_argument('seed',type=int,
                    help='seed for rng when making noise images')
parser.add_argument('output_file',
                    help='name for output file')

parser.add_argument('--obj-range',
                    help='range of objects to process, for testing')
parser.add_argument('--make-plots',action='store_true',
                    help='make plots of each epoch and the coadd')

def load_psfmap(fname):
    import psfex

    pmap={}
    with open(fname) as fobj:
        for line in fobj:
            ls=line.split()
            if ls[0]=='-9999':
                continue

            expname=ls[0]
            ccdstr=ls[1]
            path=os.path.expandvars(ls[2])

            key = '%s-%s' % (expname, ccdstr)

            if 'psfexcat' in path:
                print("loading psfex:",path)
                p=psfex.PSFEx(path)
            else:
                raise ValueError("only psfex for now")
            
            pmap[key] = p

    return pmap

def main():
    args=parser.parse_args()

    with open(args.config_file) as fobj:
        config=yaml.load(fobj)

    obj_range = args.obj_range
    if obj_range is not None:
        obj_range=[int(x) for x in args.obj_range.split(',')]

    meds_obj = meds.MEDS(args.meds_file)

    psfmap = load_psfmap(args.psfmap_file)
    coadder=meds.MEDSCoadder(
        config,
        meds_obj,
        psfmap,
        args.seed,
        make_plots=args.make_plots,
    )

    maker=meds.MEDSCoaddMaker(config, coadder)
    maker.write(args.output_file, obj_range=obj_range)


if __name__=="__main__":
    main()
